Date: Mon, 14 Jan 2008 15:08:46 +0100
MIME-Version: 1.0
To: Paul Zimmermann
Subject: GMP-ECM build structure for optimizations on different architectures
From: Thomas Kunz

Dear Paul,

Here are some suggestions for how it could be made easier to add 
architecture-specific code to GMP-ECM. I don't have much experience with 
the automake tools, so maybe some of the suggestions are considered bad 
style and have to be adapted.

- move all the *.c files that reside now in the main folder to the 
'generic' folder

- either move the files ecm-xyz.h to the 'generic' folder or allow for 
more #IFDEF's in their code. The 2nd one would allow more consistency in 
the whole code. Some architectures (like the SPU of the Cell) define a 
variable (__SPU__) that could be used for selection. If there are 
architectures that do not define such a constant and that do need 
specific code in one of the header files, it is getting more difficult 
and I don't know what the best way of handling this should be.

- If Makefile.am has sections that depend on the architecture (e.g. on 
the SPU there are two executables needed to run ecm), then one can 
define a conditional in configure.in like:
case $host in
    spu-*-*)
        spu_host=yes;;
    *)
        spu_host=no;;
esac
AM_CONDITIONAL(HAVE_SPU,test $spu_host = "yes")
which in Makefile.am can be used as "if HAVE_SPU" (just like for 
ENABLE_ASM_REDC)

- the main selection of the architectures should be made by --build=... 
in configure.in the selection of the files is done with
case $host in
    spu-*-*)
       sourcepath="spu"
    *)
       sourcepath="generic"
esac
Then you can link with AC_CONFIG_LINKS(mpmod.c:$sourcepath/mpmod.c) for 
the common files and within the 'case' with AC_CONFIG_LINKS for the 
files that only exist for certain architectures (similar to the 
mulredcXY.asm)

- Support for an additional compiler (like CC_FOR_BUILD in GMP) would be 
useful for some architectures. For the PPU of the IBM Cell I added the 
following function to acinclude.m4:

dnl  ECM_PROG_CC_FOR_PPE
dnl  ---------------------
dnl  Establish CC_FOR_PPE, a C compiler for the PPE
AC_DEFUN([ECM_PROG_CC_FOR_PPE],
[AC_REQUIRE([AC_PROG_CC])
if test -n "$CC_FOR_PPE"; then
  ECM_PROG_CC_FOR_PPE_WORKS($CC_FOR_PPE,,
    [AC_MSG_ERROR([Specified CC_FOR_PPE doesn't seem to work])])
elif test -n "$HOST_CC"; then
  ECM_PROG_CC_FOR_PPE_WORKS($HOST_CC,
    [CC_FOR_PPE=$HOST_CC],
    [AC_MSG_ERROR([Specified HOST_CC doesn't seem to work])])
else
  for i in "$CC" "$CC $CFLAGS $CPPFLAGS" cc gcc c89 c99; do
    ECM_PROG_CC_FOR_PPE_WORKS($i,
      [CC_FOR_PPE=$i
       break])
  done
  if test -z "$CC_FOR_PPE"; then
    AC_MSG_ERROR([Cannot find a PPE compiler])
  fi
fi
AC_ARG_VAR(CC_FOR_PPE,[build PPE C compiler])
AC_SUBST(CC_FOR_PPE)
])

Having this kind of functions in acinclude.m4 does not hurt the 
architectures that don't need them, so it should be save to add whatever 
is needed there.

- the files ecm-params.h.XYZ could also go to a separate directory for 
each of the architectures.

- currently 'make distclean' does not seem to remove mulredcXY.asm. This 
is something to add to get a real clean build structure.


In general I think the more the structures is like the one from GMP, the 
better it is to maintain the code and many of the automake and autoconf 
scripts can be copied from there. AFAIK everything that I mentioned 
above follows this GMP-structure.


Unfortunately I don't have time to actually do these modifications in 
the code, because I will be traveling the next 4 months.


Best regards,

Thomas
