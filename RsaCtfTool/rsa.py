from Crypto.PublicKey import RSA
from gmpy2 import *

# c = open('chall/cipher.txt', 'r').read()
# key = RSA.importKey(open('abc.txt', 'r').read())

# c = 13685824754412294767161870154394935171662372556882324072712215825247647777622476307499584456736325913095222244370882491480789672981245694439851052456050523584833628015770017973372002306829891018406870737397171684344383278099231627004851215523325774892491161074742034905463041064379100975545674569478355475517372568602747675072875872365932640799775995640879558478611608524540608348459813065152176210263410374897800276932756067418824325121488395796729583891948687986914406684160387625610994211955475639821415792810780918340686757298888282065017600884226293750275711934514199531243034570947080752198566937262329778067535
# m = key.decrypt(c)
# flag = hex(m)[2:-1].decode("hex")

# print 'n = ', key.n, '\n'
# print 'e = ', key.e, '\n'
# print 'c = ', c, '\n'
# print 'd = ', key.d, '\n'
# print 'p = ', key.p, '\n'
# print 'q = ', key.q, '\n'


# print 'm = ', m, '\n'
# print flag

# print key.d < int(iroot(key.n, 4)[0] / 3)

from os import urandom
n = 41547510450310971134643847375897443467639487855486897174677786407417282980827904083564171574743879560010239186763369973581540347051619745780356556193158448680466680921374310926376395309497425557284932490082044908359792426361000622284150000384559057351282785701594525183934525134401938139334624002214110256505582206194768417598906985953444293304397719145759535776407550603700784141186619127849932531361329865824877821696114711632504113266547712649088058383571534850811556249464117943059471127140416298293546683168035923164173089473059263256529061432116560925502592040863681860703780651696865183401806944523711671321225
e = 31337
p1 = 5
p2 = 5
p3 = 283
p4 = 827
p5 = 37663
p6 = 188537672642002761289426370839627398531696487307547734508736447469362088716473159478168442810660544011383957793535756432641864577887808150822998192688618594604670481081263064751701304257299504849700591956205072801102997253968153535496772434034860330325081458213471716892928099080356962672074852252124062969630428673854325541331217626416295044201678389556160723397168049147329623730912663520513365649157245174385025848383579200791176314831480428435295815606333241827726931566766671099126847393702234984233455986066774412196555401627775740664863378640448921926198048250420314983566468967267896590536203072103
assert n == p1*p2*p3*p4*p5*p6
print is_prime(p6)

phi = (p1-1)*(p2-0)*(p3-1)*(p4-1)*(p5-1)*(p6-1)
phi1 = (p1-1)*(p2-1)*(p3-1)*(p4-1)*(p5-1)*(p6-1)

d = invert(e, phi)
d1 = invert(e, phi1)
assert d==d1
c = int(open('/root/Downloads/babyrsa/flag.enc').read().encode("hex"), 16)

m = pow(c, d, n)
# m = 10539869175914434581558486629145308486681454119390565181976477958522698599875473172559589678075145204402797471250180347745228242277470145788597951593333189278090744363186657663545600135884298868346581523985881613957135968437450423999117153598968873855876096632629820056324456993652462341785058994998267320714248039907420321971376964715718118004432683824395401452775718275928975745843845594300106527514494237841901330291142286957401398453458645414566997532077196209208392465596068826327862709304168767530055903047741432304448216639434576603003795778212723965449649836025959665568660432683305631683439748419511051390666

flag = hex(m)[2:].decode("hex")
print flag